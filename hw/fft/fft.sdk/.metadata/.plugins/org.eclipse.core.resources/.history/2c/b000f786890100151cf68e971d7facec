#include "jamdetect.h"

void _fft(cplx buf[], cplx out[], int n, int step){
    int i;
    if (step < n) {
        _fft(out, buf, n, step * 2);
        _fft(out + step, buf + step, n, step * 2);

        for (i = 0; i < n; i += 2 * step){
                cplx t = cexpf(-I * PI * i / n) * out[i + step];
                buf[i / 2]     = out[i] + t;
                buf[(i + n)/2] = out[i] - t;
        }
    }
}

void fft(cplx buf[], int n){
    int i;
    cplx temp[n];
    cplx out[n];
    for (i = 0; i < n; i++) out[i] = buf[i];

    _fft(buf, out, n, 1);

        /* Flip the data across the y axis */
    for (i = 0; i < n/2; i++) temp[i+n/2] = buf[i];
    for (i = 0; i < n/2; i++) temp[i] = buf[i+n/2];
    for (i = 0; i < n; i++) buf[i] = temp[i]/n;
}

win_peak get_peak(cplx buf[], int nsamples, double sample_rate, double center_freq)
{
    int i;
    double max, cur;
    win_peak peak;
    int index;

    for (i = 0; i < nsamples; ++i)
    {
        cur = cabs(buf[i]);
        if (cur > max)
        {
            max = cur;
            index = i;
        }
    }
    peak.value = (10 * log10(pow(max, 2))) + 30;
    peak.freq = index * (sample_rate / nsamples) - (sample_rate/2.0) + center_freq;

    return peak;
}


jam_info process_signal(win_peak peak, double sample_rate)
{
	static int trigger;
	static int index;
	static cplx freq_vs_time[BUFFER_LEN];
	jam_info rv;
	double min = INFINITY;
	double max = -INFINITY;
	double max_freq = -INFINITY;
	double freq;
	int i, max_i;

	rv.valid = 0;
	/* Skip if not triggered and peak is below threshold */
	if (!trigger && peak.value <= THRESHOLD)
	{
		return rv;
	}

	trigger = 1;
	freq_vs_time[index++] = peak.freq + 0 * I;

	if (index == BUFFER_LEN)
	{
		for (i = 0; i < BUFFER_LEN; ++i)
		{
			freq = creal(freq_vs_time[i]);
			min = fmin(min, freq);
			max = fmax(max, freq);
		}

        fft(freq_vs_time, BUFFER_LEN);
        freq_vs_time[BUFFER_LEN/2] = 0;         /* Delete the DC value of the result */

        for (i = 0; i < BUFFER_LEN; i++){
            freq = cabs(freq_vs_time[i]);
            if (freq > max_freq){
            	max_freq = freq;
                max_i = i;
            }
         }




		rv.bandwidth = max - min;
		rv.chirp_rate = (sample_rate / BUFFER_LEN) * (max_i - (BUFFER_LEN / 2.0));


	}

	return rv;
}
